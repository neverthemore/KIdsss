// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;

    public struct _1649b29844b2c644fa407af4a788e555_8065859479899050318 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Single y;
            [FieldOffset(4)]
            public System.Single jump;
            [FieldOffset(8)]
            public System.Single run;
            [FieldOffset(12)]
            public System.Byte mainGun;
            [FieldOffset(13)]
            public System.Byte secondGun;
            [FieldOffset(14)]
            public System.Single sit;
            [FieldOffset(18)]
            public System.Single x;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.yMask;
            ySimulationFrame = frame;
            FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.jumpMask;
            jumpSimulationFrame = frame;
            FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.runMask;
            runSimulationFrame = frame;
            FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.mainGunMask;
            mainGunSimulationFrame = frame;
            FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.secondGunMask;
            secondGunSimulationFrame = frame;
            FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.sitMask;
            sitSimulationFrame = frame;
            FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.xMask;
            xSimulationFrame = frame;
        }

        public static unsafe _1649b29844b2c644fa407af4a788e555_8065859479899050318 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 22) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 22) " +
                    "for component with ID 153");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 153");
            }

            var orig = new _1649b29844b2c644fa407af4a788e555_8065859479899050318();

            var comp = (Interop*)data;

            orig.y = comp->y;
            orig.jump = comp->jump;
            orig.run = comp->run;
            orig.mainGun = comp->mainGun != 0;
            orig.secondGun = comp->secondGun != 0;
            orig.sit = comp->sit;
            orig.x = comp->x;

            return orig;
        }


        public static uint yMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame ySimulationFrame;
        public System.Single y;
        public static uint jumpMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame jumpSimulationFrame;
        public System.Single jump;
        public static uint runMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame runSimulationFrame;
        public System.Single run;
        public static uint mainGunMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame mainGunSimulationFrame;
        public System.Boolean mainGun;
        public static uint secondGunMask => 0b00000000000000000000000000010000;
        public AbsoluteSimulationFrame secondGunSimulationFrame;
        public System.Boolean secondGun;
        public static uint sitMask => 0b00000000000000000000000000100000;
        public AbsoluteSimulationFrame sitSimulationFrame;
        public System.Single sit;
        public static uint xMask => 0b00000000000000000000000001000000;
        public AbsoluteSimulationFrame xSimulationFrame;
        public System.Single x;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 153;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000001111111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 7;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;


        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_1649b29844b2c644fa407af4a788e555_8065859479899050318)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.ySimulationFrame = other.ySimulationFrame;
                this.y = other.y;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.jumpSimulationFrame = other.jumpSimulationFrame;
                this.jump = other.jump;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.runSimulationFrame = other.runSimulationFrame;
                this.run = other.run;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.mainGunSimulationFrame = other.mainGunSimulationFrame;
                this.mainGun = other.mainGun;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.secondGunSimulationFrame = other.secondGunSimulationFrame;
                this.secondGun = other.secondGun;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.sitSimulationFrame = other.sitSimulationFrame;
                this.sit = other.sit;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.xSimulationFrame = other.xSimulationFrame;
                this.x = other.x;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_1649b29844b2c644fa407af4a788e555_8065859479899050318 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 7);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.y;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.jump;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.run;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.mainGun;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.secondGun;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.sit;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.x;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;

            return mask;
        }

        public static _1649b29844b2c644fa407af4a788e555_8065859479899050318 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(7);
            }

            var val = new _1649b29844b2c644fa407af4a788e555_8065859479899050318();
            if (bitStream.ReadMask())
            {

                val.y = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.yMask;
            }
            if (bitStream.ReadMask())
            {

                val.jump = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.jumpMask;
            }
            if (bitStream.ReadMask())
            {

                val.run = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.runMask;
            }
            if (bitStream.ReadMask())
            {

                val.mainGun = bitStream.ReadBool();
                val.FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.mainGunMask;
            }
            if (bitStream.ReadMask())
            {

                val.secondGun = bitStream.ReadBool();
                val.FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.secondGunMask;
            }
            if (bitStream.ReadMask())
            {

                val.sit = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.sitMask;
            }
            if (bitStream.ReadMask())
            {

                val.x = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _1649b29844b2c644fa407af4a788e555_8065859479899050318.xMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_1649b29844b2c644fa407af4a788e555_8065859479899050318(" +
                $" y: { this.y }" +
                $" jump: { this.jump }" +
                $" run: { this.run }" +
                $" mainGun: { this.mainGun }" +
                $" secondGun: { this.secondGun }" +
                $" sit: { this.sit }" +
                $" x: { this.x }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(7, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(7, '0') })";
        }
    }

}
