// Copyright (c) coherence ApS.
// See the license file in the package root for more information.

namespace Coherence.Editor.Toolkit
{
    using System.Linq;
    using Coherence.Toolkit;
    using Connection;
    using UnityEditor;
    using UnityEngine;
    using Object = UnityEngine.Object;

    [CanEditMultipleObjects]
    [CustomEditor(typeof(CoherenceBridge))]
    internal class CoherenceBridgeEditor : BaseEditor
    {
        private static class GUIContents
        {
            public static readonly GUIContent runtime = EditorGUIUtility.TrTextContent("Runtime Information");

            public static readonly GUIContent connected =
                EditorGUIUtility.TrTextContentWithIcon("Connected", Icons.GetPath("Coherence.Connected"));

            public static readonly GUIContent disconnected =
                EditorGUIUtility.TrTextContentWithIcon("Disconnected", Icons.GetPath("Coherence.Disconnected"));

            public static readonly GUIContent disconnect = EditorGUIUtility.TrTextContent("Disconnect");

            public static readonly GUIContent simulator = Icons.GetContent("Coherence.ConnectionType.Simulator",
                "Loaded through CoherenceSceneLoader with Simulator connection type.");

            public static readonly GUIContent client = Icons.GetContent("Coherence.ConnectionType.Client",
                "Loaded through CoherenceSceneLoader with Client connection type.");

            public static readonly GUIContent networkPrefix = EditorGUIUtility.TrTextContent("Remote Object Prefix",
                "Prefix to add to networked instantiations (GameObjects) made by coherence");

            public static readonly GUIContent autoLoginAsGuest = EditorGUIUtility.TrTextContent("Auto Login As Guest",
                "If enabled, Cloud Service will automatically log in with the coherence Cloud using a player Guest Account. If you want to handle logging manually in your game, turn this option off.");

            public static readonly GUIContent cloudUniqueId = EditorGUIUtility.TrTextContent("Cloud Unique ID",
                "Uniquely identify the Cloud Service used by this CoherenceBridge. It will be used to cache the player account credentials. If it is not specified, one will be autogenerated.");

            public static readonly GUIContent mainBridge = EditorGUIUtility.TrTextContent("Main Bridge");

            public static readonly GUIContent useBuildIndexAsId =
                EditorGUIUtility.TrTextContent("Use Build Index As Scene Id");

            public static readonly GUIContent sceneIndex = EditorGUIUtility.TrTextContent("Scene Identifier");

            public static readonly GUIContent connectionPrefabsTitle =
                EditorGUIUtility.TrTextContent("Connection Prefabs (Advanced)");

            public static readonly GUIContent generalSettings = EditorGUIUtility.TrTextContent("Settings");

            public static readonly GUIContent simulationFrameSettings =
                EditorGUIUtility.TrTextContent("Simulation Frame (Advanced)");

            public static readonly GUIContent
                coherenceCloudSettings = EditorGUIUtility.TrTextContent("coherence Cloud");

            public static readonly GUIContent sceneTransitioningSettings =
                EditorGUIUtility.TrTextContent("Scene Transitioning");

            public static readonly GUIContent enableClientConnections = EditorGUIUtility.TrTextContent(
                $"{ObjectNames.NicifyVariableName(nameof(CoherenceBridge.EnableClientConnections))}",
                "With this enabled, you will be able to query how many users are connected via the CoherenceBridge.ClientConnections API.");

            public static readonly GUIContent controlTimeScale = EditorGUIUtility.TrTextContent("Control Time Scale",
                "Enables automatic client-server synchronization. Can be disabled temporarily for bullet time effects to intentionally desync clients for a short while. When set to true, Time.timeScale is nudged up/down so the game speed adapts to synchronize the game clock with the server clock.");

            public static readonly GUIContent adjustSimulationFrameByPing = EditorGUIUtility.TrTextContent(
                "Adjust Simulation Frame",
                "Adjusting the simulation frame by ping accounts for the time required for the packets to travel between the server and the client when calculating the client-server frame drift.");

            public static readonly GUIContent clientConnectionsHint =
                EditorGUIUtility.TrTextContent(
                    "Allows you to keep track of how many users are connected and uniquely identify them.");

            public static readonly GUIContent connectionPrefabsHint =
                EditorGUIUtility.TrTextContent("Instantiate this Prefab once per available Client Connection.");

            public static readonly GUIContent clientConnectionPrefab =
                EditorGUIUtility.TrTextContentWithIcon("Client", Icons.GetPath("Coherence.ConnectionType.Client"));

            public static readonly GUIContent simulatorConnectionPrefab =
                EditorGUIUtility.TrTextContentWithIcon("Simulator",
                    Icons.GetPath("Coherence.ConnectionType.Simulator"));

            public static readonly GUIContent events = EditorGUIUtility.TrTextContent("Events");

            public static readonly GUIContent liveQuerySynced =
                EditorGUIUtility.TrTextContent("Room/World state successfully synchronized.");

            public static readonly GUIContent onConnection =
                EditorGUIUtility.TrTextContent(
                    "Connection to Replication Server successful. Waiting for LiveQuery sync.");

            public static readonly GUIContent onDisconnection =
                EditorGUIUtility.TrTextContent("You were disconnected from the Room/World.");

            public static readonly GUIContent onConnectionError =
                EditorGUIUtility.TrTextContent(
                    "Connection failed. Check the ConnectionException parameter for a reason.");

            public static readonly GUIContent onNetworkedEntityCreated =
                EditorGUIUtility.TrTextContent("A new network entity is visible.");

            public static readonly GUIContent onNetworkedEntityDestroyed =
                EditorGUIUtility.TrTextContent("An existing network entity has been destroyed.");

            public static GUIContent FromConnectionType(ConnectionType type)
            {
                switch (type)
                {
                    case ConnectionType.Client:
                        return client;
                    case ConnectionType.Simulator:
                        return simulator;
                    case ConnectionType.Replicator:
                        break;
                }

                return GUIContent.none;
            }
        }

        private SerializedProperty controlTimeScale;
        private SerializedProperty enableClientConnections;
        private SerializedProperty adjustSimulationFrameByPing;
        private SerializedProperty mainBridge;
        private SerializedProperty useBuildIndexAsId;
        private SerializedProperty sceneIdentifier;

        private SerializedProperty networkPrefix;
        private SerializedProperty uniqueId;
        private SerializedProperty autoLoginAsGuest;

        private SerializedProperty clientConnectionPrefab;
        private SerializedProperty simulatorConnectionPrefab;

        private SerializedProperty onConnected;
        private SerializedProperty onDisconnected;
        private SerializedProperty onConnectionError;
        private SerializedProperty onLiveQuerySynced;
        private SerializedProperty onNetworkedEntityCreated;
        private SerializedProperty onNetworkedEntityDestroyed;

        private bool helpFoldout;
        private bool connectionPrefabsFoldout;

        protected override void OnEnable()
        {
            base.OnEnable();
            Help.HasHelpForObject(this);

            networkPrefix = serializedObject.FindProperty("networkPrefix");
            uniqueId = serializedObject.FindProperty("uniqueId");
            autoLoginAsGuest = serializedObject.FindProperty("autoLoginAsGuest");

            controlTimeScale = serializedObject.FindProperty(nameof(CoherenceBridge.controlTimeScale));
            adjustSimulationFrameByPing =
                serializedObject.FindProperty(nameof(CoherenceBridge.adjustSimulationFrameByPing));
            #pragma warning disable CS0618
            enableClientConnections = serializedObject.FindProperty("enableClientConnections");
            #pragma warning restore CS0618
            mainBridge = serializedObject.FindProperty("mainBridge");
            sceneIdentifier = serializedObject.FindProperty("sceneIdentifier");
            useBuildIndexAsId = serializedObject.FindProperty("useBuildIndexAsId");

            clientConnectionPrefab = serializedObject.FindProperty("ClientConnectionEntry");
            simulatorConnectionPrefab = serializedObject.FindProperty("SimulatorConnectionEntry");

            onConnected = serializedObject.FindProperty(nameof(CoherenceBridge.onConnected));
            onDisconnected = serializedObject.FindProperty(nameof(CoherenceBridge.onDisconnected));
            onConnectionError = serializedObject.FindProperty(nameof(CoherenceBridge.onConnectionError));
            onLiveQuerySynced = serializedObject.FindProperty(nameof(CoherenceBridge.onLiveQuerySynced));
            onNetworkedEntityCreated = serializedObject.FindProperty(nameof(CoherenceBridge.onNetworkEntityCreated));
            onNetworkedEntityDestroyed =
                serializedObject.FindProperty(nameof(CoherenceBridge.onNetworkEntityDestroyed));
        }

        protected override void OnDisable()
        {
            base.OnDisable();

            networkPrefix.Dispose();

            controlTimeScale.Dispose();
            enableClientConnections.Dispose();
            adjustSimulationFrameByPing.Dispose();
            mainBridge.Dispose();
            sceneIdentifier.Dispose();
            useBuildIndexAsId.Dispose();

            clientConnectionPrefab.Dispose();
            simulatorConnectionPrefab.Dispose();

            onConnected.Dispose();
            onDisconnected.Dispose();
            onConnectionError.Dispose();
            onLiveQuerySynced.Dispose();
            onNetworkedEntityCreated.Dispose();
            onNetworkedEntityDestroyed.Dispose();
        }

        private void DrawRuntime()
        {
            if (!Application.isPlaying)
            {
                return;
            }

            EditorGUILayout.LabelField(GUIContents.runtime, EditorStyles.centeredGreyMiniLabel);
            _ = EditorGUILayout.BeginVertical(GUI.skin.box);
            var bridge = (CoherenceBridge)target;

            using (new EditorGUILayout.HorizontalScope())
            {
                var content = bridge.IsConnected ? GUIContents.connected : GUIContents.disconnect;
                EditorGUILayout.PrefixLabel(content, EditorStyles.miniButton);
                EditorGUI.BeginDisabledGroup(!bridge.IsConnected);

                if (GUILayout.Button(GUIContents.disconnect, EditorStyles.miniButton))
                {
                    bridge.Disconnect();
                }

                EditorGUI.EndDisabledGroup();
            }

            using (new EditorGUILayout.HorizontalScope())
            {
                EditorGUILayout.PrefixLabel("Transport", EditorStyles.miniButton);
                EditorGUILayout.LabelField(bridge.Client?.DebugGetTransportDescription() ?? "Unknown");
            }

            using (new EditorGUILayout.HorizontalScope())
            {
                EditorGUILayout.PrefixLabel("Scene Name");
                EditorGUILayout.LabelField(bridge.InstantiationScene.HasValue
                    ? bridge.InstantiationScene.Value.name
                    : bridge.gameObject.scene.name);
            }

            using (new EditorGUILayout.HorizontalScope())
            {
                EditorGUILayout.PrefixLabel("Scene Identifier");
                EditorGUILayout.LabelField(bridge.ResolveSceneId().ToString());
            }

            EditorGUILayout.Separator();

            if (bridge.IsConnected)
            {
                EditorGUILayout.LabelField("Client Connections");
                EditorGUI.indentLevel++;
                if (bridge.EnableClientConnections)
                {
                    var mine = bridge.ClientConnections.GetMine();
                    foreach (var conn in bridge.ClientConnections.GetAll().OrderBy(c => c.ClientId))
                    {
                        EditorGUILayout.LabelField(
                            EditorGUIUtility.TrTextContentWithIcon(conn.ClientId.ToString(),
                                GUIContents.FromConnectionType(conn.Type).image),
                            conn == mine ? EditorStyles.boldLabel : EditorStyles.label);
                    }
                }
                else
                {
                    EditorGUI.BeginDisabledGroup(true);
                    EditorGUILayout.LabelField("Global Query On is required for Client Connections.");
                    EditorGUI.EndDisabledGroup();
                }

                EditorGUI.indentLevel--;

                EditorGUILayout.LabelField("Entities");
                foreach (var pair in bridge.EntitiesManager)
                {
                    _ = EditorGUILayout.BeginHorizontal();
                    EditorGUILayout.PrefixLabel(pair.Key.ToString());
                    if (pair.Value != null && pair.Value.Sync != null)
                    {
                        if (GUILayout.Button(pair.Value.Sync.name) && pair.Value.Sync is Object obj)
                        {
                            EditorGUIUtility.PingObject(obj);
                        }
                    }
                    else
                    {
                        EditorGUILayout.LabelField("Missing / none.");
                    }

                    EditorGUILayout.EndHorizontal();
                }
            }

            EditorGUILayout.EndVertical();
        }

        private void DrawAdvancedSettings()
        {
            EditorGUILayout.Separator();

            CoherenceHubLayout.DrawBoldLabel(GUIContents.generalSettings);
            _ = EditorGUILayout.BeginVertical(GUI.skin.box);
            _ = EditorGUILayout.PropertyField(networkPrefix, GUIContents.networkPrefix);

            EditorGUILayout.Separator();
            using (new EditorGUILayout.HorizontalScope())
            {
                CoherenceHubLayout.DrawBoldLabel(GUIContents.coherenceCloudSettings);
                CoherenceHubLayout.DrawLink(new GUIContent("CloudService Docs"),
                    DocumentationLinks.GetDocsUrl(DocumentationKeys.CloudService));
            }

            EditorGUI.indentLevel++;
            _ = EditorGUILayout.PropertyField(autoLoginAsGuest, GUIContents.autoLoginAsGuest);
            _ = EditorGUILayout.PropertyField(uniqueId, GUIContents.cloudUniqueId);
            EditorGUI.indentLevel--;

            EditorGUILayout.Separator();
            using (new EditorGUILayout.HorizontalScope())
            {
                CoherenceHubLayout.DrawBoldLabel(GUIContents.simulationFrameSettings);
                CoherenceHubLayout.DrawLink(new GUIContent("Sim Frame Docs"),
                    DocumentationLinks.GetDocsUrl(DocumentationKeys.SimFrame));
            }

            EditorGUI.indentLevel++;
            _ = EditorGUILayout.PropertyField(controlTimeScale, GUIContents.controlTimeScale);
            _ = EditorGUILayout.PropertyField(adjustSimulationFrameByPing, GUIContents.adjustSimulationFrameByPing);
            EditorGUI.indentLevel--;

            //   _ = EditorGUILayout.PropertyField(isSingleton, GUIContents.isSingleton);
            EditorGUILayout.EndVertical();
        }

        private void DrawClientConnectionSettings()
        {
            CoherenceHubLayout.DrawBoldLabel(new GUIContent("Client Connections"));

            using (new EditorGUILayout.HorizontalScope())
            {
                CoherenceHubLayout.DrawLabel(GUIContents.clientConnectionsHint);
                CoherenceHubLayout.DrawLink(new GUIContent("Client Docs"),
                    DocumentationLinks.GetDocsUrl(DocumentationKeys.ClientMessages));
            }

            _ = EditorGUILayout.BeginVertical(GUI.skin.box);
            EditorGUI.indentLevel++;

            _ = EditorGUILayout.PropertyField(enableClientConnections, GUIContents.enableClientConnections);

            if (enableClientConnections.boolValue)
            {
                EditorGUILayout.Separator();

                CoherenceHubLayout.DrawBoldLabel(GUIContents.connectionPrefabsTitle);

                using (new EditorGUILayout.HorizontalScope())
                {
                    CoherenceHubLayout.DrawLabel(GUIContents.connectionPrefabsHint);
                    CoherenceHubLayout.DrawLink(new GUIContent("Prefab Docs"),
                        DocumentationLinks.GetDocsUrl(DocumentationKeys.ClientConnectionPrefabs));
                }

                _ = EditorGUILayout.PropertyField(clientConnectionPrefab, GUIContents.clientConnectionPrefab);
                _ = EditorGUILayout.PropertyField(simulatorConnectionPrefab, GUIContents.simulatorConnectionPrefab);

                EditorGUILayout.Separator();
                using (new EditorGUILayout.HorizontalScope())
                {
                    CoherenceHubLayout.DrawBoldLabel(GUIContents.sceneTransitioningSettings);
                    CoherenceHubLayout.DrawLink(new GUIContent("Scene Transitioning Docs"),
                        DocumentationLinks.GetDocsUrl(DocumentationKeys.SceneTransitioning));
                }

                EditorGUI.indentLevel++;
                _ = EditorGUILayout.PropertyField(mainBridge, GUIContents.mainBridge);
                _ = EditorGUILayout.PropertyField(useBuildIndexAsId, GUIContents.useBuildIndexAsId);

                if (!useBuildIndexAsId.boolValue)
                {
                    _ = EditorGUILayout.PropertyField(sceneIdentifier, GUIContents.sceneIndex);
                }

                EditorGUI.indentLevel--;
            }

            EditorGUI.indentLevel--;

            EditorGUILayout.EndVertical();
        }

        private void DrawEvents()
        {
            onConnected.isExpanded =
                EditorGUILayout.BeginFoldoutHeaderGroup(onConnected.isExpanded, GUIContents.events);
            if (onConnected.isExpanded)
            {
                EditorGUILayout.Separator();
                DrawEvent(GUIContents.liveQuerySynced, DocumentationLinks.GetDocsUrl(DocumentationKeys.OnLiveQuerySynced), "LiveQuerySync Docs", onLiveQuerySynced);
                DrawEvent(GUIContents.onConnection, string.Empty, string.Empty, onConnected);
                DrawEvent(GUIContents.onDisconnection, string.Empty, string.Empty, onDisconnected);
                DrawEvent(GUIContents.onConnectionError, string.Empty, string.Empty, onConnectionError);
                DrawEvent(GUIContents.onNetworkedEntityCreated, string.Empty, string.Empty, onNetworkedEntityCreated);
                DrawEvent(GUIContents.onNetworkedEntityDestroyed, string.Empty, string.Empty, onNetworkedEntityDestroyed);
            }

            EditorGUILayout.EndFoldoutHeaderGroup();
        }

        private void DrawEvent(GUIContent explanation, string link, string linkName, SerializedProperty property)
        {
            using (new EditorGUILayout.HorizontalScope())
            {
                EditorGUILayout.LabelField(explanation);

                if (!string.IsNullOrEmpty(link))
                {
                    CoherenceHubLayout.DrawLink(new GUIContent(linkName), link);
                }
            }

            _ = EditorGUILayout.PropertyField(property);
        }

        protected override void OnGUI()
        {
            DrawRuntime();

            serializedObject.Update();

            helpFoldout = EditorGUILayout.BeginFoldoutHeaderGroup(helpFoldout, "What is the CoherenceBridge");
            if (helpFoldout)
            {
                CoherenceHubLayout.DrawInfoLabel(
                    "The CoherenceBridge establishes a connection between your scene and the coherence Replication Server. It makes sure all networked entities stay in sync.");
            }

            EditorGUILayout.EndFoldoutHeaderGroup();

            DrawEvents();
            DrawSeparator();
            DrawClientConnectionSettings();
            DrawAdvancedSettings();

            _ = serializedObject.ApplyModifiedProperties();
        }

        private static void DrawSeparator()
        {
            EditorGUILayout.Separator();
            var rect = EditorGUILayout.GetControlRect(false, 1f);
            EditorGUI.DrawRect(new Rect(rect)
            {
                x = 0f,
                width = Screen.width
            }, Color.black);
            EditorGUILayout.Separator();
        }
    }
}
